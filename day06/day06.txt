day06笔记
1.ORM操作
    1.插入(略)
    2.查询(略)
    3.修改
        ex:将users表中id为1的人的年龄更改为60岁

        1.查
            user =Users.query.filter_by(id=1).first()
        2.改
            user.age = 60
        3.保存
            db.session.add(user)
            db.session.commit()
    4.删除
        1.查
        2.删除
            db.session.delete(实体对象)


2.关系映射
    1.一对多关系映射
        一对多在数据库中的实现方式:主外键关系
        在 '多' 表中添加一个列,作为外键,引用在 '一' 表的主键
        语法:
            1.在 '多' 实体类中+-+键列(属性)
                外键列名 = db.Column(db.Integer,db.ForeignKey('主表.主键'))
			2.在 "一" 的实体中
				增加关联属性以及反向引用关系

				ex:
					关联属性：
						在 course 对象中，通过一个属性能够得到对应的所有的teacher们
						关联属性，是应该加在 Course 的实体类中
					反向引用：
						在 teacher 对象中，通过一个属性能够得到对应的course
						反向引用关系属性，是应该加在 Teacher 的实体类中

				增加关联属性和反向引用关系：
				属性名=db.relationship('多表实体类名',关系选项)

				关系选项：
				选项名               说明
				backref              在关系的另一个模型中添加的反向引用属性名
					(准备在"多"的实体中增加对"一"的实体引用的属性名)

				lazy                 指定如何加载当前的相关记录
				                     select:首次访问时加载记录
                                     immediate:源对象加载后马上加载相关记录
                                     subquery:效果同上，利用子查询方式加载记录
                                     noload:永不加载记录
                                     dynamic:默认不加载记录，但会提供加载记录的查询

				uselist(一对一)              如果设置为False，表示不使用列表表示关联数据，而使用标量,就是一个对象
				secondary(多对多)            指定多对多关系映射中的关联表的名字


	2.一对一
		1.什么是一对一
			A表中的一条记录只能与B表中的一条记录相关联
			B表中的一条记录只能与A表中的一条记录相关联
		2.在SQLAlchemy中的体现
			1.在任意一个类中增加
				外键列名 = db.Column(db.Integer,db.ForeignKey('主键表.主键列'))
			2.在另外一个类中增加
				关联属性 和 反向引用关系属性
				属性=db.relationship('关联的实体类',backref='反向引用属性名',uselist=False)
