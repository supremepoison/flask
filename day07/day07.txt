day06复习

﻿1.数据库操作
  1.修改
    1.查
      filter()
      filter_by()
    2.改
      对象.属性 = 值
    3.保存
      db.session.add(对象)
  2.删除
    1.查
    2.删
      db.session.delete(对象)
2.ORM 的关系映射
  1.一对多关系
    1.在 "多" 的实体中
      属性 = db.Column(db.Integer,db.ForeignKey('主表.主键'))
    2.在 "一" 的实体中
      添加 关联属性 以及 反向引用关系
      属性 = db.relationship('多的实体类名',backref='属性名',关系选项)
      关系选项:
        1.backref : 反向引用属性名
        2.lazy : 如何加载相关记录
          1.select : 首次访问时加载记录
          2.immediate : 源对象加载后马上加载关联记录,使用表连接
          3.subquery : 同上,使用子查询
          4.noload : 不加载关联记录
          5.dynamic : 默认不加载记录,但会提供加载记录的查询
        3.uselist(一对一) : 如果设置为False,不使用列表表示关联数据,而使用标量
        4.secondary(多对多): 指定多对多的第三张关联表

      ex : Course(一) 和 Teacher(多)
        一门课程可以被多名老师教授
        一名老师只能教授一门课程

        class Teacher(db.Model):
          __tablename__ = "teacher"
          course_id = db.Column(db.Integer,db.ForeignKey('course.id'))

        class Course(db.Model):
          __tablename__ = "course"
          #关联属性 和 反向引用关系
          teachers = db.relationship('Teacher',backref='course',lazy="dynamic")

        数据操作:
          1.为 Teacher 指定 关联的 Course
            1.通过 外键列 进行关联
              tea = Teacher(xxx)
              tea.course_id = xxx
              db.session.add(tea)
            2.通过 反向引用属性 进行关联
              tea = Teacher(xxx)
              tea.course = course_obj
              db.session.add(tea)
          2.获取关联的数据
            1.通过 Teacher的对象找 Course对象
              通过 反向引用属性 找到对应的"一"的对象
              tea = Teacher.query.filter_by(id=1).first()
              cou = tea.course # tea所关联的course对象

            2.通过 Course的对象找 Teacher的对象们
              通过 关联属性 找到对应的所有的"多"的对象们
              course = Course.query.filter_by(id=1).first()
              teaList = course.teachers.all()
              for tea in teaList:
                print(tea.tname)
  2.一对一关系
    Users(一) 和 Wife(一)
    一对一的操作在关联的两个类中任何一个类中操作都可以
    1.在 任意一个 实体类中 增加
      属性 = db.Column(db.Integer,db.ForeignKey('主表.主键'),unique=True)
    2.在 另一个 实体类中增加
      关联属性 和 反向引用关系
      属性 = db.relationship('关联的实体类名',backref='反向引用属性名',uselist=False)

    实现 Users 和 Wife 的一对一的关系:
    1. 在 Wife 中增加对 Users 的引用(外键)
      users_id = db.Column(db.Integer,db.ForeignKey('users.id'))
    2. 在 Users 中增加关联属性 和 反向引用关系
      wife = db.relationship('Wife',backref='user',uselist=False)

    指定关联数据:
      1.为 Wife 指定 Users 的关联信息
        1.通过 外键列 指定关联信息
          wife = Wife(xxx)
          wife.users_id = xxx
          db.session.add(wife)
        2.通过 反向引用属性 指定关联信息
          wife = Wife(xxx)
          wife.user = user_obj
          db.session.add(wife)
    获取关联信息
      1.通过 Users的对象 获取 对应的 Wife 对象
        通过 关联属性 获取对应的 Wife 对象
        user = Users.query.filter_by(id=1).first()
        wife = user.wife
      2.通过 Wife的对象 获取 对应的 Users 对象
        通过 反向引用属性 获取对应的 Users 对象
        wife = Wife.query.filter_by(id=1).first()
        user = wife.user
*****************************************************************
day07笔记


1.多对多的关系映射
    1.什么是多对多
        A表中的一条数据可以与B表中的任意多条数据相关联
            A:B   :   1:M
        B表中的一条数据可以与A表中的任意多条数据相关联
            B:A   :   1:M

    2.在数据库中的实现
        依托于第三张关联表来实现的
    3.SQLAlchemy 创建第三张表对应类


2.cookies
    1.什么是cookies
        cookies 是一种数据存储手段
        将一段你文本内容保存在客户端(浏览器)中的一种手段,并可以长时间保存

    2.cookies的使用场合
        1.记住密码
        2.记住搜索文本
    3.Flask 中使用 cookies
        1.保存cookies到客户端
            使用响应对象,将数据保存进客户端
            1.resp=make_response('')
            2.resp=redirect('')

            cookies的语法:
            响应对象.set_cookie(key,value,max_age)
                key:字符串,要保存的cookies的名称
                value:字符串,要保存的cookie的值
                max_age:最大的保存时间,取值数字,以s为单位
                    60
                    3600
                    60*60*24
                    60*60*24*365

        2.在服务器端获取cookies的值
            每次向服务器发送请求时,
            浏览器会将cookies中所有的数据封装到request中病带到服务器中
            request.cookies 获取所有的cookies的值

        3.删除cookies的内容
            相应对象.delete_cookie('key')

3.session - 会话
    1.什么是session
        session是保存在服务器上,为每个浏览器所开辟的一段空间
        目的: 保存浏览器与服务器的一些交互状态(数据)
        关闭浏览器 session 则清空
        一般30分组浏览器清楚session

    2.session 在 Flask 中的实现
        1.配置 SECRET_KEY
            app.config['SECRET_KEY']='qwertyuiop'
        2.使用 session
            from flask import session
            1.向session保存数据
                session['key'] = value
            2.从session获取数据
                value = session['key']
                value = session.get('key')
            3.删除session的数据
                del session['key']

    3.保存进session的内容
        1.多次与服务器交互时要用到的数据需要保存进 session
            如: 登录信息

